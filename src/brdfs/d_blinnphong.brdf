analytic

# Blinn's 1977 phong variant

# normalization constant:
# 1/Integrate[Cos[x/2]^n Cos[x] Sin[x], {x, 0, Pi/2}, {phi, 0, 2 Pi}, Assumptions -> n > 0]
# == ( (2 + n)(4 + n) ) / ( 8Pi(2^(-n/2) + n) )


# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float n 1 1000 100
bool normalized 1
::end parameters

# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever else you want too, like sqr() below).

::begin shader

const float PI = 3.14159265358979323846;

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3 H = normalize(L+V);
    float D = pow(max(0, dot(N,H)),n);
    if (normalized)
        D *= ( (2.0 + n) * (4.0 + n) ) / ( 8.0 * PI * ( pow( 2.0, -n / 2.0 ) + n ) );
    return vec3(D);
}

::end shader
